#1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно,
# в программе.

sample = []
sample.append(1)
sample.append("geekbrains")
sample.append(1101)
sample.append([1,2,3])
sample.append({1: "Лекция 1", 2: "Лекция 2"})
sample.append(True)
sample.append((1,2,3))

print(f'Заданный список: {sample} ', '\n' )

for i, s in enumerate(sample):
    if type(s) == int:
        print(f"Элемент {s} с индексом {i} имеет целочисленный тип данных")
    elif type(s) == str: #Александра, подскажите, пожалуйста, почему не работает эта строка? Не смогла разобраться...
        print(f"Элемент {s} с индексом {i} имеет строковый тип данных")
    elif type(s) == list:
        print(f"Элемент {s} с индексом {i} имеет тип данных список")
    elif type(s) == dict:
        print(f"Элемент {s} с индексом {i} имеет тип данных словарь")
    elif type(s) == bool:
        print(f"Элемент {s} с индексом {i} имеет булевый тип данных")
    elif type(s) == tuple:
        print(f"Элемент {s} с индексом {i} имеет тип данных кортеж")


# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3
# и т.д. При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо
# использовать функцию input().

spisok = input("\nЗаполните список элементами через пробел: ")
current_list = spisok.split(" ")
new_list = []

n = 0
while n < len(current_list) - 1:
    new_list.append(current_list[n + 1])
    new_list.append(current_list[n])
    n = n + 2

if len(current_list) % 2 == 0:
    print(f' Новый список:  {new_list}')
else:
    new_list.append(current_list[-1])
    print(f' Новый список:  {new_list}')

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, весна,
# лето, осень). Напишите решения через list и через dict.

# решение через dict
season = {1: 'зима', 2: 'зима', 3: 'весна', 4: 'весна', 5: 'весна', 6: 'лето', 7: 'лето', 8: 'лето', 9: 'осень', 10: 'осень', 11: 'осень', 12: 'зима'}

month = int(input("Введите целое число от 1 до 12: "))
if (month > 12 or month < 1):
    print("Введенное число не удовлетворяет диапазону [1,12]")
else:
    print(f"Введенное число относится ко времени году {season[month]}")

# решение через list
zima = [12, 1, 2]
vesna = [3, 4, 5]
leto = [6, 7, 8]
osen = [9, 10, 11]

month = int(input("Введите целое число от 1 до 12: "))
if (month > 12 or month < 1):
    print("Введенное число не удовлетворяет диапазону [1,12]")
else:
    if month in zima:
        print("Введенное число относится ко времени году зима")
    elif month in vesna:
        print("Введенное число относится ко времени году весна")
    elif month in leto:
        print("Введенное число относится ко времени году лето")
    else:
         print("Введенное число относится ко времени году осень")

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. Строки
#необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

s = input("Введите предложение из нескольких слов, разделенных пробелами: ")
if s.find(' ') > 0:
    s = s.split(" ")
    for n , i in enumerate(s):
        print(f" Строка № {n + 1} . {i[:10]} ")
else:
    print("Необходимо ввести предложение как минимум из двух слов")

#5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя необходимо
#запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же
#значением должен разместиться после них.

my_list = [7, 5, 3, 3, 2]
number = int(input("Введите новый элемент рейтинга"))

my_list.append(number)
my_list.sort()

print(f"Новый рейтинг {my_list[::-1]}")

# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит информацию
# об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами (характеристиками товара:
# название, цена, количество, единица измерения). Структуру нужно сформировать программно, т.е. запрашивать все данные у
# пользователя.

num = int(input("Какое количество товаров Вы хотите ввести: "))

goods = []
i = 1
while i <= num:
    goods_name = input("Введите название товара: ")
    goods_price = input("Введите цену товара: ")
    goods_count = input("Введите количество товара: ")
    goods.append((i, {'название' : goods_name, 'цена' : goods_price, 'количество' : goods_count, 'ед' : 'шт' }))
    i = i + 1

goods_new = {'название' : [],
             'цена' : [],
             'количество' : [],
             'ед' : [] }

for n in goods:
    goods_new['название'].append(n[1]['название'])
    goods_new['цена'].append(n[1]['цена'])
    goods_new['количество'].append(n[1]['количество'])
    goods_new.update({'ед' : n[1]['ед']})

print(f'\nПолучившийся словарь данных : {goods_new} ')
